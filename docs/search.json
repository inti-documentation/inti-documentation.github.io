[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "inti-documentation.github.io",
    "section": "",
    "text": "Este es la documentación desarrollada para facilitar el camino para un desarrollador Fullstack Web Developer.\nThis is a Quarto website.To learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Mi nombre es Inti Luna y soy ingeniero ambiental con un gran interés en aprender a crear soluciones que integran análisis de datos y web apps.\nContacto: inti.luna.aviles@gmail.com"
  },
  {
    "objectID": "index.html#qué-es-la-palabra-clave-this-en-js",
    "href": "index.html#qué-es-la-palabra-clave-this-en-js",
    "title": "inti-documentation.github.io",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "checkpoint7.html",
    "href": "checkpoint7.html",
    "title": "Checkpoint 7",
    "section": "",
    "text": "JS icon\n\n\nJavascript se diferencia de otros lenguajes (como Java, Python, C, Ruby, etc.) en que es el único que puede ser interpretado por un web browser.\nLa razón de esto es historica, en 1995 fue cuando creado por la empresa Netscape que era predominante en el mercado queria un lenguaje que pareciera como Java. Aunque inicialmente se penso para manejar Front-End y Back-End, solo ha sido exitosa en el Front-End. Aun después de la desaparición del browser de Netscape, las compañias siguientes han continuado el uso de Javascript.\nReferencias\nhttps://snipcart.com/blog/why-javascript-benefits\nhttps://en.wikipedia.org/wiki/Netscape\n\n\n\nEn JavaScript existen diferentes tipos de datos que se pueden clasificar principalmente en dos grandes categorías: tipos primitivos y tipos complejos (también llamados objetos). A continuación, se desarrolla cada uno de estos grupos junto con ejemplos y explicaciones de su funcionamiento.\n\n\nLos tipos primitivos son aquellos que se almacenan y se gestionan por valor. Esto significa que cuando asignas o pasas un valor primitivo, se copia literalmente su valor en memoria. Algunas características clave de los tipos primitivos son:\nInmutabilidad: Una vez creado, el valor primitivo no puede cambiar; en lugar de modificarlo, se crea uno nuevo si se asigna un valor distinto.\nSin métodos propios: Aunque JavaScript permite acceder a métodos en tipos primitivos a través de un proceso llamado autoboxing (envoltura automática), en esencia estos valores no poseen métodos propios como los objetos.\nLos tipos primitivos en JavaScript incluyen:\nNumber: Para representar tanto enteros como números con decimales. Sin embargo tiene limites:\nNúmeros flotantes: Puedes trabajar con números muy pequeños y muy grandes, tanto positivos como negativos, que tienen decimales.\nNúmeros enteros: Aunque puedes usar números enteros, JavaScript garantiza que sean precisos solo si están en el rango seguro, que es desde -(2^53 − 1) hasta 2^53 − 1. Si el número entero está fuera de este rango, ya no se representa con total precisión y se convierte en una aproximación de punto flotante.\nVerificación: Puedes usar la función Number.isSafeInteger() para comprobar si un número entero está dentro de ese rango seguro.\nString: Cadenas de caracteres.\nCodificación y Posición: Los strings se codifican usando UTF-16, lo que significa que cada carácter se guarda como un valor numérico de 16 bits. Cada carácter ocupa una posición numerada, donde el primer carácter está en el índice 0, el siguiente en el 1, y así sucesivamente. La propiedad length de un string indica el número de unidades UTF-16, que puede no coincidir exactamente con la cantidad real de caracteres en todos los casos.\nInmutabilidad: Las cadenas son inmutables, lo que significa que una vez creada una cadena, no se puede modificar directamente. Si necesitas cambiarla, las operaciones como extraer una parte del texto (usando substring()) o unir dos cadenas (con el operador + o concat()) generan una nueva cadena sin alterar la original.\nBoolean: Valores lógicos true y false. Usualmene usados en operaciones con condicionales.\nNull: Representa la ausencia intencional de cualquier valor u objeto.\nUndefined: Indica que una variable ha sido declarada pero aún no se le ha asignado ningún valor.\nSymbol: Introducido en ES6, se utiliza para crear identificadores únicos para propiedades de objetos.\nBigInt: Introducido en versiones más recientes (ES2020), permite trabajar con números enteros de gran magnitud que superan el límite del tipo Number.\nEn la siguiente tabla se puede resumir los tipos primitivos, los valores que regresa y correspondiente clase o tipo de objeto que lo contiene:\n\n\n\nJS types\n\n\n\n\n\nLos tipos complejos, o objetos, se gestionan por referencia. Esto significa que cuando asignas o pasas un objeto, lo que se copia es la referencia a la ubicación en memoria donde se encuentra ese objeto. Algunas características de los objetos son:\nMutabilidad: A diferencia de los primitivos, los objetos pueden modificarse después de su creación. Por ejemplo, puedes añadir, modificar o eliminar propiedades.\nColección de propiedades y métodos: Un objeto puede contener datos (propiedades) y funcionalidades (métodos).\nHerencia prototípica: JavaScript utiliza prototipos para heredar propiedades y métodos entre objetos, lo que permite crear estructuras de datos más complejas y reutilizables.\nDentro de la categoría de objetos se incluyen:\nObjetos literales: Se definen directamente usando pares de clave valor y permite almacenar diferentes atributos relacionados de manera flexible, por ejemplo,\nlet persona = { nombre: \"Ana\", edad: 28 };\nArrays: Son objetos especializados para almacenar colecciones ordenadas de datos,\nlet numeros = [1, 2, 3, 4];\nFunciones: En JavaScript, las funciones se consideran objetos de primera clase, lo que significa que pueden asignarse a variables, pasarse como argumentos o devolverse desde otras funciones,\n\nfunction saludar() {\n        console.log(\"Hola\");\n    }\n\n\n\n\n\n\nOtros objetos: Como Date, RegExp, Map, Set, entre otros, que proporcionan funcionalidades específicas para manejar fechas, expresiones regulares y colecciones de valores.\nReferencia:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Data_structures\nhttps://brainstation.io/learn/javascript/data-types\nhttps://www.w3schools.com/js/js_typeof.asp\n\n\n\n\n\n\n\n\n\n\n\n\n\nJS ternary\n\n\nEl operador condicional (ternario) es el único operador de JavaScript que toma tres operandos: una condición seguida de un signo de interrogación (?), luego una expresión que se ejecuta si la condición es verdadera y, a continuación, dos puntos (:) seguidos de la expresión que se ejecuta si la condición es falsa. Este operador se utiliza frecuentemente como una alternativa a la sentencia if…else.\ncondicion ? ExpresionEjecutaSiVerdadero : ExpresionEjecutaSiFalso\nPor ejemplo, imaginamos que hemos decidido comprar lecha cuando hay menos de 5 litros en casa (nos encanta hacer yogurt :D).\nPrimero veamos como seria usando condicional tipo if … else :\n\nif (lecheLitros &gt;= 5) {\n  console.log(`No comprar leche!`);\n} else {\n  console.log(`Comprar leche!`);\n}\nAhora veamos un seudo código de operación ternaria:\nHayMenosQueUmbral ? ComprarLeche : NoComprarLeche\nEn código seria algo como:\nconst umbral = 5;\nlet lecheLitros = 26;\nconst comprarLeche = lecheLitros &gt;= umbral ? \"No comprar leche\" : \"Comprar Leche\";\nconsole.log(comprarLeche); // \"No comprar leche\"\nComo vemos, la operación ternaria nos ofrece una manera de simplificar el código y la lectura en ciertos casos donde las condiciones son simples.\nReferencias\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_operator\nhttps://www.w3schools.com/java/java_conditions_shorthand.asp\nhttps://www.tpointtech.com/ternary-operator-in-java\n\n\n\n\n\n\n\n\n\n\n// ejercicio.js\n\n/*crea funcion que toma 4 argumentos, suma los 2 primeros y multiplica los 2 siguientes\nSi el número creado es mayor que 50, la consola registra \"¡El número es mayor que 50!\". \nSi es más pequeño, la consola registra \"¡El número es menor que 50!\"\n*/\nfunction myFunctionSumaMultiplica(num1, num2,num3,num4) {\n    \n// Verificar que se hayan pasado exactamente 4 argumentos\nif (arguments.length !== 4) {\n    console.log(\"Error de cantidad: se deben pasar 4 argumentos.\");\n    return;\n}\n\n// Verificar que todos sean números\nif (\n    typeof num1 !== 'number' ||\n    typeof num2 !== 'number' ||\n    typeof num3 !== 'number' ||\n    typeof num4 !== 'number'\n) {\n    console.log(\"Error de tipo: todos los 4 argumentos deben ser números.\");\n    return;\n}\n    \n    let suma1 = num1 + num2;\n    let suma2 = num3 + num4;\n    let producto = suma1 * suma2;\n    if (producto &gt; 50) {\n        console.log(`¡El número ${producto} es mayor que 50!`);\n    }\n    else if (producto === 50) {\n        console.log(`¡El número ${producto} es igual a 50!`);\n    }\n    else {\n        console.log(`¡El número ${producto} es menor que 50!`);\n    }\n\n    \n  }\n\n//llama a la funcion y muestra el resultado en consola\n//var resultado = myFunctionSumaMultiplica(2.5, 3, 4, 2);\n\n// ejemplo con error de tipo\n//var resultado2 = myFunctionSumaMultiplica(2.5, 3, \"4\", 2);\n// ejemplo con error de cantidad de argumentos\n//var resultado3 = myFunctionSumaMultiplica(2.5, 3, 4);\n\n\n\n\n\n\nEnlace a fichero JS"
  },
  {
    "objectID": "checkpoint7.html#qué-es-la-palabra-clave-this-en-js",
    "href": "checkpoint7.html#qué-es-la-palabra-clave-this-en-js",
    "title": "Checkpoint 7",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "checkpoint7.html#ejercicio",
    "href": "checkpoint7.html#ejercicio",
    "title": "Checkpoint 7",
    "section": "",
    "text": "// ejercicio.js\n\n/*crea funcion que toma 4 argumentos, suma los 2 primeros y multiplica los 2 siguientes\nSi el número creado es mayor que 50, la consola registra \"¡El número es mayor que 50!\". \nSi es más pequeño, la consola registra \"¡El número es menor que 50!\"\n*/\nfunction myFunctionSumaMultiplica(num1, num2,num3,num4) {\n    \n// Verificar que se hayan pasado exactamente 4 argumentos\nif (arguments.length !== 4) {\n    console.log(\"Error de cantidad: se deben pasar 4 argumentos.\");\n    return;\n}\n\n// Verificar que todos sean números\nif (\n    typeof num1 !== 'number' ||\n    typeof num2 !== 'number' ||\n    typeof num3 !== 'number' ||\n    typeof num4 !== 'number'\n) {\n    console.log(\"Error de tipo: todos los 4 argumentos deben ser números.\");\n    return;\n}\n    \n    let suma1 = num1 + num2;\n    let suma2 = num3 + num4;\n    let producto = suma1 * suma2;\n    if (producto &gt; 50) {\n        console.log(`¡El número ${producto} es mayor que 50!`);\n    }\n    else if (producto === 50) {\n        console.log(`¡El número ${producto} es igual a 50!`);\n    }\n    else {\n        console.log(`¡El número ${producto} es menor que 50!`);\n    }\n\n    \n  }\n\n//llama a la funcion y muestra el resultado en consola\n//var resultado = myFunctionSumaMultiplica(2.5, 3, 4, 2);\n\n// ejemplo con error de tipo\n//var resultado2 = myFunctionSumaMultiplica(2.5, 3, \"4\", 2);\n// ejemplo con error de cantidad de argumentos\n//var resultado3 = myFunctionSumaMultiplica(2.5, 3, 4);\n\n\n\n\n\n\nEnlace a fichero JS"
  },
  {
    "objectID": "checkpoint7.html#qué-diferencia-a-javascript-de-cualquier-otro-lenguaje-de-programación",
    "href": "checkpoint7.html#qué-diferencia-a-javascript-de-cualquier-otro-lenguaje-de-programación",
    "title": "Checkpoint 7",
    "section": "",
    "text": "JS icon\n\n\nJavascript se diferencia de otros lenguajes (como Java, Python, C, Ruby, etc.) en que es el único que puede ser interpretado por un web browser.\nLa razón de esto es historica, en 1995 fue cuando creado por la empresa Netscape que era predominante en el mercado queria un lenguaje que pareciera como Java. Aunque inicialmente se penso para manejar Front-End y Back-End, solo ha sido exitosa en el Front-End. Aun después de la desaparición del browser de Netscape, las compañias siguientes han continuado el uso de Javascript.\nReferencias\nhttps://snipcart.com/blog/why-javascript-benefits\nhttps://en.wikipedia.org/wiki/Netscape"
  },
  {
    "objectID": "checkpoint7.html#cuáles-son-algunos-tipos-de-datos-js",
    "href": "checkpoint7.html#cuáles-son-algunos-tipos-de-datos-js",
    "title": "Checkpoint 7",
    "section": "",
    "text": "En JavaScript existen diferentes tipos de datos que se pueden clasificar principalmente en dos grandes categorías: tipos primitivos y tipos complejos (también llamados objetos). A continuación, se desarrolla cada uno de estos grupos junto con ejemplos y explicaciones de su funcionamiento.\n\n\nLos tipos primitivos son aquellos que se almacenan y se gestionan por valor. Esto significa que cuando asignas o pasas un valor primitivo, se copia literalmente su valor en memoria. Algunas características clave de los tipos primitivos son:\nInmutabilidad: Una vez creado, el valor primitivo no puede cambiar; en lugar de modificarlo, se crea uno nuevo si se asigna un valor distinto.\nSin métodos propios: Aunque JavaScript permite acceder a métodos en tipos primitivos a través de un proceso llamado autoboxing (envoltura automática), en esencia estos valores no poseen métodos propios como los objetos.\nLos tipos primitivos en JavaScript incluyen:\nNumber: Para representar tanto enteros como números con decimales. Sin embargo tiene limites:\nNúmeros flotantes: Puedes trabajar con números muy pequeños y muy grandes, tanto positivos como negativos, que tienen decimales.\nNúmeros enteros: Aunque puedes usar números enteros, JavaScript garantiza que sean precisos solo si están en el rango seguro, que es desde -(2^53 − 1) hasta 2^53 − 1. Si el número entero está fuera de este rango, ya no se representa con total precisión y se convierte en una aproximación de punto flotante.\nVerificación: Puedes usar la función Number.isSafeInteger() para comprobar si un número entero está dentro de ese rango seguro.\nString: Cadenas de caracteres.\nCodificación y Posición: Los strings se codifican usando UTF-16, lo que significa que cada carácter se guarda como un valor numérico de 16 bits. Cada carácter ocupa una posición numerada, donde el primer carácter está en el índice 0, el siguiente en el 1, y así sucesivamente. La propiedad length de un string indica el número de unidades UTF-16, que puede no coincidir exactamente con la cantidad real de caracteres en todos los casos.\nInmutabilidad: Las cadenas son inmutables, lo que significa que una vez creada una cadena, no se puede modificar directamente. Si necesitas cambiarla, las operaciones como extraer una parte del texto (usando substring()) o unir dos cadenas (con el operador + o concat()) generan una nueva cadena sin alterar la original.\nBoolean: Valores lógicos true y false. Usualmene usados en operaciones con condicionales.\nNull: Representa la ausencia intencional de cualquier valor u objeto.\nUndefined: Indica que una variable ha sido declarada pero aún no se le ha asignado ningún valor.\nSymbol: Introducido en ES6, se utiliza para crear identificadores únicos para propiedades de objetos.\nBigInt: Introducido en versiones más recientes (ES2020), permite trabajar con números enteros de gran magnitud que superan el límite del tipo Number.\nEn la siguiente tabla se puede resumir los tipos primitivos, los valores que regresa y correspondiente clase o tipo de objeto que lo contiene:\n\n\n\nJS types\n\n\n\n\n\nLos tipos complejos, o objetos, se gestionan por referencia. Esto significa que cuando asignas o pasas un objeto, lo que se copia es la referencia a la ubicación en memoria donde se encuentra ese objeto. Algunas características de los objetos son:\nMutabilidad: A diferencia de los primitivos, los objetos pueden modificarse después de su creación. Por ejemplo, puedes añadir, modificar o eliminar propiedades.\nColección de propiedades y métodos: Un objeto puede contener datos (propiedades) y funcionalidades (métodos).\nHerencia prototípica: JavaScript utiliza prototipos para heredar propiedades y métodos entre objetos, lo que permite crear estructuras de datos más complejas y reutilizables.\nDentro de la categoría de objetos se incluyen:\nObjetos literales: Se definen directamente usando pares de clave valor y permite almacenar diferentes atributos relacionados de manera flexible, por ejemplo,\nlet persona = { nombre: \"Ana\", edad: 28 };\nArrays: Son objetos especializados para almacenar colecciones ordenadas de datos,\nlet numeros = [1, 2, 3, 4];\nFunciones: En JavaScript, las funciones se consideran objetos de primera clase, lo que significa que pueden asignarse a variables, pasarse como argumentos o devolverse desde otras funciones,\n\nfunction saludar() {\n        console.log(\"Hola\");\n    }\n\n\n\n\n\n\nOtros objetos: Como Date, RegExp, Map, Set, entre otros, que proporcionan funcionalidades específicas para manejar fechas, expresiones regulares y colecciones de valores.\nReferencia:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Data_structures\nhttps://brainstation.io/learn/javascript/data-types\nhttps://www.w3schools.com/js/js_typeof.asp"
  },
  {
    "objectID": "checkpoint7.html#qué-es-un-operador-ternario",
    "href": "checkpoint7.html#qué-es-un-operador-ternario",
    "title": "Checkpoint 7",
    "section": "",
    "text": "JS ternary\n\n\nEl operador condicional (ternario) es el único operador de JavaScript que toma tres operandos: una condición seguida de un signo de interrogación (?), luego una expresión que se ejecuta si la condición es verdadera y, a continuación, dos puntos (:) seguidos de la expresión que se ejecuta si la condición es falsa. Este operador se utiliza frecuentemente como una alternativa a la sentencia if…else.\ncondicion ? ExpresionEjecutaSiVerdadero : ExpresionEjecutaSiFalso\nPor ejemplo, imaginamos que hemos decidido comprar lecha cuando hay menos de 5 litros en casa (nos encanta hacer yogurt :D).\nPrimero veamos como seria usando condicional tipo if … else :\n\nif (lecheLitros &gt;= 5) {\n  console.log(`No comprar leche!`);\n} else {\n  console.log(`Comprar leche!`);\n}\nAhora veamos un seudo código de operación ternaria:\nHayMenosQueUmbral ? ComprarLeche : NoComprarLeche\nEn código seria algo como:\nconst umbral = 5;\nlet lecheLitros = 26;\nconst comprarLeche = lecheLitros &gt;= umbral ? \"No comprar leche\" : \"Comprar Leche\";\nconsole.log(comprarLeche); // \"No comprar leche\"\nComo vemos, la operación ternaria nos ofrece una manera de simplificar el código y la lectura en ciertos casos donde las condiciones son simples.\nReferencias\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_operator\nhttps://www.w3schools.com/java/java_conditions_shorthand.asp\nhttps://www.tpointtech.com/ternary-operator-in-java"
  }
]